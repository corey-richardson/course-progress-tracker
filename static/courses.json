{
    "course list": [
        {
            "name": "Learn Python 3",
            "desc": "Learn the basics of Python 3, one of the most powerful, versatile, and in-demand programming languages today.",
            "url": "https://www.codecademy.com/learn/learn-python-3",
            "provider": "Codecademy",
            "length": "25 hours",
            "section": "Python",
            "completed": "true"
        },
        {
            "name": "Learn Intermediate Python 3",
            "desc": "Learn Intermediate Python 3 and practice leveraging Python's unique features to build powerful, sophisticated applications. Continue your Python 3 learning journey with Learn Intermediate Python 3. Intermediate Python 3 is a stepping stone to taking your skills to the next level. This course will provide you with the knowledge to make your Python code cleaner, more efficient, and more manageable. We'll also dive under the hood of fundamental concepts that will deepen your understanding of the Python language.",
            "url": "https://www.codecademy.com/learn/learn-intermediate-python-3",
            "provider": "Codecademy",
            "length": "15 hours",
            "section": "Python",
            "completed": "true"
        },
        {
            "name": "Learn Advanced Python 3",
            "desc": "Learn advanced topics in Python 3 and improve your developer skills. Are you a lover of Python 3 and looking to advance your skills in the language? This course is for you. We will dive into some advanced Python skills that will allow you to take your programming to the next level. Learn new paradigms that will give you the flexibility to create clean, effective code and make you a truly advanced Python 3 programmer.",
            "url": "https://www.codecademy.com/learn/learn-advanced-python",
            "provider": "Codecademy",
            "length": "9 hours",
            "section": "Python",
            "completed": "true"
        },
        {
            "name": "Learn Flask",
            "desc": "Create fully-featured, interactive web applications with Flask",
            "url": "https://www.codecademy.com/learn/learn-flask",
            "provider": "Codecademy",
            "length": "10 hours",
            "section": "Flask, Python",
            "completed": "true"
        },
        {
            "name": "Build Python Web Apps with Django",
            "desc": "Django is written in Python and provides an opinionated approach to web development meaning you'll know how projects are structured and you'll have a general set of guidelines for how to bring your apps to life. Django comes with a lot of tools already provided, so you can pick and choose what you need to get the job done.",
            "url": "https://www.codecademy.com/learn/paths/build-python-web-apps-with-django",
            "provider": "Codecademy",
            "length": "10 weeks",
            "section": "Django, Python",
            "completed": "false"
        },
        {
            "name": "Learn C#",
            "desc": "Learn Microsoft's popular C# programming language, used to make websites, mobile apps, video games, VR, and more.",
            "url": "https://www.codecademy.com/learn/learn-c-sharp",
            "provider": "Codecademy",
            "length": "30 hours",
            "section": "C#",
            "completed": "true"
        },
        {
            "name": "C# Basics for Beginners: Learn C# Fundamentals by Coding",
            "desc": "Master C# fundamentals in 6 hours - The most popular course with 50,000+ students, packed with tips and exercises!",
            "url": "https://www.udemy.com/course/csharp-tutorial-for-beginners/",
            "provider": "Udemy, Mosh Hamedani",
            "length": "6 hours",
            "section": "C#",
            "completed": "false"
        },
        {
            "name": "C# Intermediate: Classes, Interfaces and OOP",
            "desc": "An in-depth, step-by-step guide to classes, interfaces and object-oriented programming (OOP) with C#",
            "url": "https://www.udemy.com/course/csharp-intermediate-classes-interfaces-and-oop/",
            "provider": "Udemy, Mosh Hamedani",
            "length": "5.5 hours",
            "section": "C#",
            "completed": "false"
        },
        {
            "name": "C# Advanced Topics: Prepare for Technical Interviews",
            "desc": "Master the confusing C# constructs: Events, Delegates, Lambda Expressions, LINQ, Async/Await and more!",
            "url": "https://www.udemy.com/course/csharp-advanced/",
            "provider": "Udemy, Mosh Hamedani",
            "length": "3 hours",
            "section": "C#",
            "completed": "false"
        },
        {
            "name": "Learn C",
            "desc": "Learn about the C programming language in this beginner-friendly skill path.",
            "url": "https://www.codecademy.com/learn/paths/c",
            "provider": "Codecademy",
            "length": "2 months",
            "section": "C",
            "completed": "true"
        },
        {
            "name": "C Programming For Beginners",
            "desc": "Learn C in ten easy steps on Windows, Mac OS X or Linux",
            "url": "https://www.udemy.com/course/c-programming-for-beginners",
            "provider": "Udemy, Huw Collingbourne",
            "length": "6 hours",
            "section": "C",
            "completed": "false"
        },
        {
            "name": "Learn C++",
            "desc": "Learn C++ - a versatile programming language that's important for developing software, games, databases, and more. With its adaptability and fast rendering, you'll find the C++ programming language used everywhere, from web browsers to game development and operating systems to science and machine learning tools. This course will help you learn C++ basics and give you hands-on experience to create your own projects and work with computer memory.",
            "url": "https://www.codecademy.com/learn/learn-c-plus-plus",
            "provider": "Codecademy",
            "length": "25 hours",
            "section": "C++",
            "completed": "true"
        },
        {
            "name": "CS50X Introduction to Computer Science",
            "desc": "This is CS50, Harvard University's introduction to the intellectual enterprises of computer science and the art of programming, for concentrators and non-concentrators alike, with or without prior programming experience. (Two thirds of CS50 students have never taken CS before.) This course teaches you how to solve problems, both with and without code, with an emphasis on correctness, design, and style. The course starts with a traditional but omnipresent language called C that underlies today's newer languages, via which you'll learn not only about functions, variables, conditionals, loops, and more, but also about how computers themselves work underneath the hood, memory and all. The course then transitions to Python, a higher-level language that you'll understand all the more because of C. Toward term's end, the course introduces SQL, via which you can store data in databases, along with HTML, CSS, and JavaScript, via which you can create web and mobile apps alike. Course culminates in a final project.",
            "url": "https://cs50.harvard.edu/x/2023/",
            "provider": "Harvard",
            "length": "11 weeks",
            "section": "CS50, CompSci",
            "completed": "false"
        },
        {
            "name": "CS50P Introduction to Programming with Python",
            "desc": "An introduction to programming using a language called Python. Learn how to read and write code as well as how to test and debug it. Designed for students with or without prior programming experience who'd like to learn Python specifically. Learn about functions, arguments, and return values (oh my!); variables and types; conditionals and Boolean expressions; and loops. Learn how to handle exceptions, find and fix bugs, and write unit tests; use third-party libraries; validate and extract data with regular expressions; model real-world entities with classes, objects, methods, and properties; and read and write files. Hands-on opportunities for lots of practice. Exercises inspired by real-world programming problems. No software required except for a web browser, or you can write code on your own PC or Mac.",
            "url": "https://cs50.harvard.edu/python/2022/",
            "provider": "Harvard",
            "length": "10 weeks",
            "section": "CS50, Python",
            "completed": "true"
        },
        {
            "name": "CS50W Web Programming with Python and JavaScript",
            "desc": "This course picks up where CS50x leaves off, diving more deeply into the design and implementation of web apps with Python, JavaScript, and SQL using frameworks like Django, React, and Bootstrap. Topics include database design, scalability, security, and user experience. Through hands-on projects, students learn to write and use APIs, create interactive UIs, and leverage cloud services like GitHub and Heroku. By semester's end, students emerge with knowledge and experience in principles, languages, and tools that empower them to design and deploy applications on the Internet.",
            "url": "https://cs50.harvard.edu/web/2020/",
            "provider": "Harvard",
            "length": "9 weeks",
            "section": "CS50, Fullstack",
            "completed": "false"
        },
        {
            "name": "CS50AI Introduction to Artificial Intelligence with Python",
            "desc": "This course explores the concepts and algorithms at the foundation of modern artificial intelligence, diving into the ideas that give rise to technologies like game-playing engines, handwriting recognition, and machine translation. Through hands-on projects, students gain exposure to the theory behind graph search algorithms, classification, optimization, machine learning, large language models, and other topics in artificial intelligence as they incorporate them into their own Python programs. By course's end, students emerge with experience in libraries for machine learning as well as knowledge of artificial intelligence principles that enable them to design intelligent systems of their own.",
            "url": "https://cs50.harvard.edu/ai/2023/",
            "provider": "Harvard",
            "length": "7 weeks",
            "section": "CS50, AI, Python",
            "completed": "false"
        },
        {
            "name": "CS50 Games",
            "desc": "This course picks up where CS50x leaves off, focusing on the development of 2D and 3D interactive games. Students explore the design of such childhood games as Super Mario Bros., Legend of Zelda, and Portal in a quest to understand how video games themselves are implemented. Via lectures and hands-on projects, the course explores principles of 2D and 3D graphics, animation, sound, and collision detection using frameworks like Unity and LOVE 2D, as well as languages like Lua and C#. By class's end, students will have programmed several of their own games and gained a thorough understanding of the basics of game design and development.",
            "url": "https://cs50.harvard.edu/games/2018/",
            "provider": "Harvard",
            "length": "12 weeks",
            "section": "CS50, C#, Lua, Unity",
            "completed": "false"
        },
        {
            "name": "Machine Learning/AI Engineer Career Path ",
            "desc": "Machine Learning/AI Engineers build end-to-end ML applications and power many of the apps we use every day. They work in Python, Git, & ML. Includes Python, Machine Learning, Software Engineering, Algorithms, Pandas, scikit-learn, Git, Bash, and more.",
            "url": "https://www.codecademy.com/learn/paths/machine-learning-engineer",
            "provider": "Codecademy",
            "length": "4 months",
            "section": "ML, Python",
            "completed": "true"
        },
        {
            "name": "Learn Kotlin",
            "desc": "Learn Kotlin, the expressive, open-source programming language developed by JetBrains.\r\n\r\n",
            "url": "https://www.codecademy.com/learn/learn-kotlin",
            "provider": "Codecademy",
            "length": "15 hours",
            "section": "Kotlin",
            "completed": "false"
        },
        {
            "name": "Introduction to Computer Science and Programming in Python",
            "desc": "Introduction to Computer Science and Programming in Python is intended for students with little or no programming experience. It aims to provide students with an understanding of the role computation can play in solving problems and to help students, regardless of their major, feel justifiably confident of their ability to write small programs that allow them to accomplish useful goals. ",
            "url": "https://ocw.mit.edu/courses/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/pages/syllabus/",
            "provider": "MIT",
            "length": "12 weeks",
            "section": "OSSU Core CS",
            "completed": "false"
        },
        {
            "name": "How to Code: Simple Data",
            "desc": "Learn the secret to writing well-tested and easy to improve programs, that will set you up to master any programming language",
            "url": "https://www.edx.org/learn/coding/university-of-british-columbia-how-to-code-simple-data",
            "provider": "University of British Columbia",
            "length": "7 weeks",
            "section": "OSSU Core CS",
            "completed": "false"
        },
        {
            "name": "How to Code: Complex Data",
            "desc": "Learn how to design more complex programs, using new data structures, abstraction, and generative recursion.",
            "url": "https://www.edx.org/learn/coding/university-of-british-columbia-how-to-code-complex-data",
            "provider": "University of British Columbia",
            "length": "6 weeks",
            "section": "OSSU Core CS",
            "completed": "false"
        },
        {
            "name": "Programming Languages, Part A",
            "desc": "This course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language fits together to make you more effective programming in any language -- and in learning new ones.",
            "url": "https://www.coursera.org/learn/programming-languages",
            "provider": "University of Washington",
            "length": "29 hours",
            "section": "OSSU Core CS",
            "completed": "false"
        },
        {
            "name": "Programming Languages, Part B",
            "desc": "This course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language fits together to make you more effective programming in any language -- and in learning new ones.",
            "url": "https://www.coursera.org/learn/programming-languages-part-b",
            "provider": "University of Washington",
            "length": "16 hours",
            "section": "OSSU Core CS",
            "completed": "false"
        },
        {
            "name": "Programming Languages, Part C",
            "desc": "This course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language fits together to make you more effective programming in any language -- and in learning new ones.",
            "url": "https://www.coursera.org/learn/programming-languages-part-c",
            "provider": "University of Washington",
            "length": "18 hours",
            "section": "OSSU Core CS",
            "completed": "false"
        },
        {
            "name": "Object-Oriented Design",
            "desc": "This course takes Java beginners to the next level by covering object-oriented analysis and design. You will discover how to create modular, flexible, and reusable software, by applying object-oriented design principles and guidelines. And, you will be able to communicate these designs in a visual notation known as Unified Modelling Language (UML).",
            "url": "https://www.coursera.org/learn/object-oriented-design",
            "provider": "University of Alberta",
            "length": "17 hours",
            "section": "OSSU Core CS",
            "completed": "false"
        },
        {
            "name": "Design Patterns",
            "desc": "This course extends object-oriented analysis and design by incorporating design patterns to create interactive applications. Through a survey of established design patterns, you will gain a foundation for more complex software applications. Finally, you will identify problematic software designs by referencing a catalog of code smells.",
            "url": "https://www.coursera.org/learn/design-patterns",
            "provider": "University of Alberta",
            "length": "15 hours",
            "section": "OSSU Core CS",
            "completed": "false"
        },
        {
            "name": "Software Architecture",
            "desc": "The way that software components subroutines, classes, functions, etc.   are arranged,  and the interactions between them, is called architecture. In this course you will study the ways these architectures are represented, both in UML and other visual tools. We will introduce the most common architectures, their qualities, and tradeoffs. We will talk about how architectures are evaluated, what makes a good architecture, and an architecture can be improved. We'll also talk about how the architecture touches on the process of software development.",
            "url": "https://www.coursera.org/learn/software-architecture",
            "provider": "University of Alberta",
            "length": "9 hours",
            "section": "OSSU Core CS",
            "completed": "false"
        },
        {
            "name": "Calculus 1A: Differentiation",
            "desc": "How does the final velocity on a zip line change when the starting point is raised or lowered by a matter of centimeters? What is the accuracy of a GPS position measurement? How fast should an airplane travel to minimize fuel consumption? The answers to all of these questions involve the derivative.",
            "url": "https://openlearninglibrary.mit.edu/courses/course-v1:MITx+18.01.1x+2T2019/about",
            "provider": "MIT",
            "length": "13 weeks",
            "section": "OSSU Core Maths",
            "completed": "false"
        },
        {
            "name": "Calculus 1B: Integration",
            "desc": "How long should the handle of your spoon be so that your fingers do not burn while mixing chocolate fondue? Can you find a shape that has finite volume, but infinite surface area? How does the weight of the rider change the trajectory of a zip line ride? These and many other questions can be answered by harnessing the power of the integral.",
            "url": "https://openlearninglibrary.mit.edu/courses/course-v1:MITx+18.01.2x+3T2019/about",
            "provider": "MIT",
            "length": "15 weeks",
            "section": "OSSU Core Maths",
            "completed": "false"
        },
        {
            "name": "Calculus 1C: Coordinate Systems & Infinite Series",
            "desc": "How did Newton describe the orbits of the planets? To do this, he created calculus. But he used a different coordinate system more appropriate for planetary motion. We will learn to shift our perspective to do calculus with parameterized curves and polar coordinates. And then we will dive deep into exploring the infinite to gain a deeper understanding and powerful descriptions of functions.",
            "url": "https://openlearninglibrary.mit.edu/courses/course-v1:MITx+18.01.3x+1T2020/about",
            "provider": "MIT",
            "length": "13 weeks",
            "section": "OSSU Core Maths",
            "completed": "false"
        },
        {
            "name": "Mathematics for Computer Science",
            "desc": "Fundamental concepts of mathematics: Definitions, proofs, sets, functions, relations. Discrete structures: graphs, state machines, modular arithmetic, counting. Discrete probability theory.",
            "url": "https://openlearninglibrary.mit.edu/courses/course-v1:OCW+6.042J+2T2019/about",
            "provider": "MIT",
            "length": "13 weeks",
            "section": "OSSU Core Maths",
            "completed": "false"
        },
        {
            "name": "The Missing Semester of Your CS Education",
            "desc": "Classes teach you all about advanced topics within CS, from operating systems to machine learning, but theres one critical subject thats rarely covered, and is instead left to students to figure out on their own: proficiency with their tools. Well teach you how to master the command-line, use a powerful text editor, use fancy features of version control systems, and much more!",
            "url": "https://missing.csail.mit.edu/",
            "provider": "MIT",
            "length": "2 weeks",
            "section": "CS Tools",
            "completed": "false"
        },
        {
            "name": "Build a Modern Computer from First Principles: From Nand to Tetris",
            "desc": "In this project-centered course* you will build a modern computer system, from the ground up. Well divide this fascinating journey into six hands-on projects that will take you from constructing elementary logic gates all the way through creating a fully functioning general purpose computer. In the process, you will learn - in the most direct and constructive way - how computers work, and how they are designed.",
            "url": "https://www.coursera.org/learn/build-a-computer",
            "provider": "Coursera",
            "length": "43 hours",
            "section": "OSSU Core Systems",
            "completed": "false"
        },
        {
            "name": "Build a Modern Computer from First Principles: Nand to Tetris Part II",
            "desc": "In this project-centered course you will build a modern software hierarchy, designed to enable the translation and execution of object-based, high-level languages on a bare-bone computer hardware platform. In particular, you will implement a virtual machine and a compiler for a simple, Java-like programming language, and you will develop a basic operating system that closes gaps between the high-level language and the underlying hardware platform. In the process, you will gain a deep, hands-on understanding of numerous topics in applied computer science, e.g. stack processing, parsing, code generation, and classical algorithms and data structures for memory management, vector graphics, input-output handling, and various other topics that lie at the very OSSU Core of every modern computer system.",
            "url": "https://www.coursera.org/learn/nand2tetris2",
            "provider": "Coursera",
            "length": "89 hours",
            "section": "OSSU Core Systems",
            "completed": "false"
        },
        {
            "name": "Operating Systems: Three Easy Pieces",
            "desc": "GitHub Repo.",
            "url": "https://github.com/ossu/computer-science/blob/master/coursepages/ostep/README.md",
            "provider": "OSSU",
            "length": "80-200 hours",
            "section": "OSSU Core Systems",
            "completed": "false"
        },
        {
            "name": "Computer Networking: A Top Down Approach",
            "desc": "Book, 8th edition",
            "url": "http://gaia.cs.umass.edu/kurose_ross/online_lectures.htm",
            "provider": "Jim Kurose, Keith Ross",
            "length": "8 weeks",
            "section": "OSSU Core Systems",
            "completed": "false"
        },
        {
            "name": "Divide and Conquer, Sorting and Searching, and Randomized Algorithms",
            "desc": "The primary topics in this part of the specialization are: asymptotic (Big-oh) notation, sorting and searching, divide and conquer (master method, integer and matrix multiplication, closest pair), and randomized algorithms (QuickSort, contraction algorithm for min cuts).",
            "url": "https://www.coursera.org/learn/algorithms-divide-conquer#outcomes",
            "provider": "Stanford",
            "length": "16 hours",
            "section": "OSSU Core Theory",
            "completed": "false"
        },
        {
            "name": "Graph Search, Shortest Paths, and Data Structures",
            "desc": "The primary topics in this part of the specialization are: data structures (heaps, balanced search trees, hash tables, bloom filters), graph primitives (applications of breadth-first and depth-first search, connectivity, shortest paths), and their applications (ranging from deduplication to social network analysis).",
            "url": "https://www.coursera.org/learn/algorithms-graphs-data-structures",
            "provider": "Stanford",
            "length": "15 hours",
            "section": "OSSU Core Theory",
            "completed": "false"
        },
        {
            "name": "Greedy Algorithms, Minimum Spanning Trees, and Dynamic Programming",
            "desc": "The primary topics in this part of the specialization are: greedy algorithms (scheduling, minimum spanning trees, clustering, Huffman codes) and dynamic programming (knapsack, sequence alignment, optimal search trees).",
            "url": "https://www.coursera.org/learn/algorithms-greedy",
            "provider": "Stanford",
            "length": "15 hours",
            "section": "OSSU Core Theory",
            "completed": "false"
        },
        {
            "name": "Shortest Paths Revisited, NP-Complete Problems and What To Do About Them",
            "desc": "The primary topics in this part of the specialization are: shortest paths (Bellman-Ford, Floyd-Warshall, Johnson), NP-completeness and what it means for the algorithm designer, and strategies for coping with computationally intractable problems (analysis of heuristics, local search).",
            "url": "https://www.coursera.org/learn/algorithms-npcomplete",
            "provider": "Stanford",
            "length": "13 hours",
            "section": "OSSU Core Theory",
            "completed": "false"
        },
        {
            "name": "Cybersecurity Fundamentals",
            "desc": "Learn cybersecurity fundamentals, including how to detect threats, protect systems and networks, and anticipate potential cyber attacks.",
            "url": "https://www.edx.org/learn/cybersecurity/rochester-institute-of-technology-cybersecurity-fundamentals",
            "provider": "Rochester Institute of Technology",
            "length": "8 weeks",
            "section": "OSSU Core Security",
            "completed": "false"
        },
        {
            "name": "Principles of Secure Coding",
            "desc": "This course introduces you to the principles of secure programming. It begins by discussing the philosophy and principles of secure programming, and then presenting robust programming and the relationship between it and secure programming. We'll go through a detailed example of writing robust code and we'll see many common programming problems and show their connection to writing robust, secure programs in general. Well examine eight design principles that govern secure coding and how to apply them to your own work. Well discuss how poor design choices drive implementation in coding. Well differentiate between informal, formal, and ad hoc coding methods. Throughout, methods for improving the security and robustness of your programs will be emphasized and you will have an opportunity to practice these concepts through various lab activities. A knowledge of the C programming language is helpful, but not required to participate in the lab exercises.",
            "url": "https://www.coursera.org/learn/secure-coding-principles",
            "provider": "UCDavis",
            "length": "15 hours",
            "section": "OSSU Core Security",
            "completed": "false"
        },
        {
            "name": "Identifying Security Vulnerabilities",
            "desc": "This course will help you build a foundation of some of the fundamental concepts in secure programming. We will learn about the concepts of threat modeling and cryptography and you'll be able to start to create threat models, and think critically about the threat models created by other people. We'll learn the basics of applying cryptography, such as encryption and secure hashing. We'll learn how attackers can exploit application vulnerabilities through the improper handling user-controlled data. We'll gain a fundamental understanding of injection problems in web applications, including the three most common types of injection problems: SQL injection, cross-site scripting, and command injection. ",
            "url": "https://www.coursera.org/learn/identifying-security-vulnerabilities",
            "provider": "UCDavis",
            "length": "13 hours",
            "section": "OSSU Core Security",
            "completed": "false"
        },
        {
            "name": "Identifying Security Vulnerabilities in C/C++Programming",
            "desc": "This course builds upon the skills and coding practices learned in both Principles of Secure Coding and Identifying Security Vulnerabilities, courses one and two, in this specialization.  This course uses the focusing technique that asks you to think about:  what to watch out for and where to look to evaluate and ultimately remediate fragile C++ library code. ",
            "url": "https://www.coursera.org/learn/identifying-security-vulnerabilities-c-programming",
            "provider": "UCDavis",
            "length": "22 hours",
            "section": "OSSU Core Security",
            "completed": "false"
        },
        {
            "name": "Databases: Modeling and Theory",
            "desc": "Relational algebra - the algebraic query language that provides the formal foundations of SQL",
            "url": "https://www.edx.org/learn/databases/stanford-university-databases-modeling-and-theory",
            "provider": "Stanford University",
            "length": "2 weeks",
            "section": "OSSU Core Applications",
            "completed": "false"
        },
        {
            "name": "Databases: Relational Databases and SQL",
            "desc": "Introduction to the relational model and concepts in relational databases and relational database management systems",
            "url": "https://www.edx.org/learn/relational-databases/stanford-university-databases-relational-databases-and-sql",
            "provider": "Stanford University",
            "length": "2 weeks",
            "section": "OSSU Core Applications",
            "completed": "false"
        },
        {
            "name": "Databases: Semistructured Data",
            "desc": "The XML model for semistructured and self-describing data, including DTDs and some features of XML Schema",
            "url": "https://www.edx.org/learn/computer-programming/stanford-university-semistructured-data",
            "provider": "Stanford University",
            "length": "2 weeks",
            "section": "OSSU Core Applications",
            "completed": "false"
        },
        {
            "name": "Machine Learning Specialization",
            "desc": "Explore the essentials of machine learning and develop practical skills to implement AI applications in this beginner-friendly program. Gain proficiency in a broad range of modern machine learning techniques such as supervised learning, unsupervised learning, neural networks, and decision trees, among others.",
            "url": "https://www.coursera.org/specializations/machine-learning-introduction",
            "provider": "Stanford and DeepLearningAI",
            "length": "8 weeks",
            "section": "OSSU Core Applications",
            "completed": "false"
        },
        {
            "name": "Computer Graphics",
            "desc": "Learn to create images of 3D scenes in both real-time and with realistic ray tracing in this introductory computer graphics course.",
            "url": "https://www.edx.org/learn/computer-graphics/the-university-of-california-san-diego-computer-graphics",
            "provider": "The University of California, San Diego",
            "length": "6 weeks",
            "section": "OSSU Core Applications",
            "completed": "false"
        },
        {
            "name": "Software Engineering: Introduction",
            "desc": "Learn how to apply engineering principles, such as Agile, to build a full-stack software system.",
            "url": "https://www.edx.org/learn/software-engineering/university-of-british-columbia-software-engineering-introduction",
            "provider": "University of British Columbia",
            "length": "6 weeks",
            "section": "OSSU Core Applications",
            "completed": "false"
        },
        {
            "name": "Ethics, Technology and Engineering",
            "desc": "This course provides an introduction to ethics in engineering and technology. It helps engineers and students in engineering to acquire the competences mentioned in the ABET criteria or comparable criteria formulated in other countries.",
            "url": "https://www.coursera.org/learn/ethics-technology-engineering",
            "provider": "Eindhoven University of Technology",
            "length": "19 hours",
            "section": "OSSU Core Ethics",
            "completed": "false"
        },
        {
            "name": "Introduction to Intellectual Property",
            "desc": "This course will introduce the various types of U.S. intellectual property: patents, which cover inventions and process innovations; copyright, which protects original works of authorship; and trademarks, which protect a business commercial identity as the source of valuable goods and services. You will then explore case studies of how global businesses have used intellectual property law to generate enormous value from these intangible assets.",
            "url": "https://www.coursera.org/learn/introduction-intellectual-property",
            "provider": "University of Pennsylvania",
            "length": "15 hours",
            "section": "OSSU Core Ethics",
            "completed": "false"
        },
        {
            "name": "Data Privacy Fundamentals",
            "desc": "This course is designed to introduce data privacy to a wide audience and help each participant see how data privacy has evolved as a compelling concern to public and private organizations as well as individuals. In this course, you will hear from legal and technical experts and practitioners who encounter data privacy issues daily. This course will review theories of data privacy as well as data privacy in the context of social media and artificial intelligence. It will also explore data privacy issues in journalism, surveillance, new technologies like facial recognition and biometrics.",
            "url": "https://www.coursera.org/learn/northeastern-data-privacy",
            "provider": "Northeasten University",
            "length": "8 hours",
            "section": "OSSU Core Ethics",
            "completed": "false"
        },
        {
            "name": "Learn Machine Learning",
            "desc": "Machine Learning impacts nearly everything we do, from shopping to healthcare. Whether you want to understand how ML algorithms work in the world around us or train your own models, this Skill Path will get you there. You will learn industry-standard algorithms and libraries while completing real-world projects to practice your skills. Let's dive into the exciting tools reshaping our world. Includes Machine Learning, Data Science, Python 3, Machine Learning Models, Scikit-learn, Regression, and more.",
            "url": "https://www.codecademy.com/learn/paths/machine-learning-fundamentals",
            "provider": "Codecademy",
            "length": "4 weeks",
            "section": "ML, Python",
            "completed": "true"
        },
        {
            "name": "Learn Git & GitHub",
            "desc": "Git is used across the world to help developers keep track of changes while working on different parts of the same project. GitHub is a web app that can integrate with Git. Together, users can host, organize, explore, and collaborate on code with teams and the wider developer community. This course gives you an introduction to Git and GitHub - and how they work together as you build projects.",
            "url": "https://www.codecademy.com/learn/learn-git",
            "provider": "Codecademy",
            "length": "15 hours",
            "section": "Git, Github, Source Control",
            "completed": "true"
        },
        {
            "name": "Learn the Command Line",
            "desc": "Learn about the command line, starting with navigating and manipulating the file system, and ending with redirection and configuring the env",
            "url": "https://www.codecademy.com/learn/learn-the-command-line",
            "provider": "Codecademy",
            "length": "8 hours",
            "section": "CLI",
            "completed": "true"
        },
        {
            "name": "Visualize Data with Python (2022 Version) Skill Path",
            "desc": "Learn to visualize data and create compelling data stories in Python.",
            "url": "https://www.codecademy.com/learn/paths/visualize-data-with-python-2022",
            "provider": "Codecademy",
            "length": "6 weeks",
            "section": "Data Viz, Python",
            "completed": "true"
        },
        {
            "name": "MATLAB Fundamentals",
            "desc": "Learn core MATLAB functionality for data analysis, visualization, modeling, and programming. Implement a common data analysis workflow that can be applied to many science and engineering applications.",
            "url": "https://matlabacademy.mathworks.com/details/matlab-fundamentals/mlbe",
            "provider": "MathWorks",
            "length": "17 hours",
            "section": "MATLAB",
            "completed": "true"
        }
    ]
}